// Generated by gencpp from file turtle_battle/GameState.msg
// DO NOT EDIT!


#ifndef TURTLE_BATTLE_MESSAGE_GAMESTATE_H
#define TURTLE_BATTLE_MESSAGE_GAMESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtle_battle
{
template <class ContainerAllocator>
struct GameState_
{
  typedef GameState_<ContainerAllocator> Type;

  GameState_()
    : turtle1_health(0)
    , turtle2_health(0)
    , turtle1_attacks_remaining(0)
    , turtle2_attacks_remaining(0)  {
    }
  GameState_(const ContainerAllocator& _alloc)
    : turtle1_health(0)
    , turtle2_health(0)
    , turtle1_attacks_remaining(0)
    , turtle2_attacks_remaining(0)  {
  (void)_alloc;
    }



   typedef int32_t _turtle1_health_type;
  _turtle1_health_type turtle1_health;

   typedef int32_t _turtle2_health_type;
  _turtle2_health_type turtle2_health;

   typedef int32_t _turtle1_attacks_remaining_type;
  _turtle1_attacks_remaining_type turtle1_attacks_remaining;

   typedef int32_t _turtle2_attacks_remaining_type;
  _turtle2_attacks_remaining_type turtle2_attacks_remaining;





  typedef boost::shared_ptr< ::turtle_battle::GameState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtle_battle::GameState_<ContainerAllocator> const> ConstPtr;

}; // struct GameState_

typedef ::turtle_battle::GameState_<std::allocator<void> > GameState;

typedef boost::shared_ptr< ::turtle_battle::GameState > GameStatePtr;
typedef boost::shared_ptr< ::turtle_battle::GameState const> GameStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtle_battle::GameState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtle_battle::GameState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtle_battle::GameState_<ContainerAllocator1> & lhs, const ::turtle_battle::GameState_<ContainerAllocator2> & rhs)
{
  return lhs.turtle1_health == rhs.turtle1_health &&
    lhs.turtle2_health == rhs.turtle2_health &&
    lhs.turtle1_attacks_remaining == rhs.turtle1_attacks_remaining &&
    lhs.turtle2_attacks_remaining == rhs.turtle2_attacks_remaining;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtle_battle::GameState_<ContainerAllocator1> & lhs, const ::turtle_battle::GameState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtle_battle

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtle_battle::GameState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtle_battle::GameState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtle_battle::GameState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtle_battle::GameState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_battle::GameState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_battle::GameState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtle_battle::GameState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0051aa3ff6623e54a13e3a5509f76a87";
  }

  static const char* value(const ::turtle_battle::GameState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0051aa3ff6623e54ULL;
  static const uint64_t static_value2 = 0xa13e3a5509f76a87ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtle_battle::GameState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtle_battle/GameState";
  }

  static const char* value(const ::turtle_battle::GameState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtle_battle::GameState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 turtle1_health\n"
"int32 turtle2_health\n"
"int32 turtle1_attacks_remaining\n"
"int32 turtle2_attacks_remaining\n"
;
  }

  static const char* value(const ::turtle_battle::GameState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtle_battle::GameState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turtle1_health);
      stream.next(m.turtle2_health);
      stream.next(m.turtle1_attacks_remaining);
      stream.next(m.turtle2_attacks_remaining);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtle_battle::GameState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtle_battle::GameState_<ContainerAllocator>& v)
  {
    s << indent << "turtle1_health: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turtle1_health);
    s << indent << "turtle2_health: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turtle2_health);
    s << indent << "turtle1_attacks_remaining: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turtle1_attacks_remaining);
    s << indent << "turtle2_attacks_remaining: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turtle2_attacks_remaining);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLE_BATTLE_MESSAGE_GAMESTATE_H
